---
- name: Collect software version from all IOS and NX-OS devices
  hosts: all
  gather_facts: true
  gather_subset: min
  connection: network_cli
  ignore_errors: true
  ignore_unreachable: true

- name: Collect ACI software version, craft host_list and query Cisco PSIRT OpenVuln API
  hosts: localhost
  gather_facts: true
  gather_subset: min
  vars:
#    aci:
#      - { apic: , aci_user: , aci_pass: }
    host_list:
      - { name: aci, version: 14.2(5k), tag: Test_ACI }
      - { name: nxos, version: 7.0(3)I7(7), tag: Test_NXOS }
    client_key:  
    client_secret: 

  tasks:    

    - name: INCLUDE KNOWN VULN FILE
      include_vars:
        file: known_vuln.yml
        name: known_vuln
      ignore_errors: yes

    - name: Query ACI fabric nodes
      aci_rest:
        host: "{{ item.apic }}"
        username: "{{ item.aci_user }}"
        password: "{{ item.aci_pass }}"
        validate_certs: false
        method: get
        path: /api/node/class/firmwareRunning.json
      loop: "{{ aci }}"
      register: aci_firmware
      when: aci is defined
   
    # Complete the host_list with ACI, NX-OS, IOS-XE and IOS devices #

    - name: ENSURE FOLLOWING TASKS LOOP GETS A LIST
      set_fact:
        aci_firmware:
          results: []
      when: aci is not defined and not aci_firmware.changed

    - name: ADD ACI DEVICES TO HOST LIST
      set_fact:
        host_list: "{{ host_list | default ([]) + [{ 'name': 'aci', 'version': '1' + item.1.firmwareRunning.attributes.peVer, 'tag': item.0.item.apic }] }}"
      loop: "{{ aci_firmware.results | subelements('imdata') }}"
      loop_control:
        label: "{{ item.0.item.apic }} {{ item.1.firmwareRunning.attributes.dn.split('/')[2] }}"
      when: aci is defined

    - name: ADD NX-OS DEVICES TO HOST LIST
      set_fact:
        host_list: "{{ host_list | default ([]) + [{ 'name': 'nxos', 'version': hostvars[item].ansible_facts.net_version, 'tag': hostvars[item].group_names | join(' ') }] }}"
      loop: "{{ groups['all'] }}"
      when:
        - hostvars[item].ansible_network_os is defined
        - hostvars[item].ansible_network_os == "nxos"

    - name: ADD IOS-XE DEVICES TO HOST LIST
      set_fact:
        host_list: "{{ host_list | default ([]) + [{ 'name': 'iosxe', 'version': hostvars[item].ansible_facts.net_version, 'tag': hostvars[item].group_names | join(' ') }] }}"
      loop: "{{ groups['all'] }}"
      when:
        - hostvars[item].ansible_network_os is defined
        - hostvars[item].ansible_network_os == "ios"
        - hostvars[item].ansible_facts.net_version is defined
        - hostvars[item].ansible_facts.net_version.split('.') | first in  ['03', '16', '17']

    - name: ADD IOS DEVICES TO HOST LIST
      set_fact:
        host_list: "{{ host_list | default ([]) + [{ 'name': 'ios', 'version': hostvars[item].ansible_facts.net_version, 'tag': hostvars[item].group_names | join(' ') }] }}"
      loop: "{{ groups['all'] }}"
      when:
        - hostvars[item].ansible_network_os is defined
        - hostvars[item].ansible_network_os == "ios"
        - hostvars[item].ansible_facts.net_version is defined
        - hostvars[item].ansible_facts.net_version.split('.') | first in ['12', '15']

    # Prepare tag_list and os_list #

    - name: GENERATE TAG_LIST FROM HOST_LIST
      set_fact:
        tag_list: "{{ tag_list | default ([]) + [{ 'name': item.name, 'version': item.version, 'tag': item.tag  }] }}"
      loop: "{{ host_list }}"

    - name: ERASE DUPLICATES AND SORT TAG_LIST
      set_fact:
        tag_list: "{{ tag_list | unique | sort(attribute='version', reverse = True) }}"

    - name: GENERATE OS_LIST FROM HOST_LIST
      set_fact:
        os_list: "{{ os_list | default ([]) + [{ 'name': item.name, 'version': item.version }] }}"
      loop: "{{ host_list }}"

    - name: ERASE DUPLICATES AND SORT OS_LIST
      set_fact:
        os_list: "{{ os_list | unique | sort(attribute='version', reverse = True) }}"

    # Query the Cisco PSIRT openVuln API

    - name: CISCO OPENVULN API LOGIN
      uri:
        url: https://cloudsso.cisco.com/as/token.oauth2
        headers:
          Content-Type: application/x-www-form-urlencoded
        method: POST
        body:
          grant_type: client_credentials
          client_id: "{{ client_key }}"
          client_secret: "{{ client_secret }}"
        validate_certs: no
        body_format: form-urlencoded
      environment:
        https_proxy: http://<proxy-url>:<port>
      register: login

    - name: SET ACCESS-TOKEN FROM LOGIN RESPONSE
      set_fact:
        token_type: "{{ login.json.token_type }}"
        access_token: "{{ login.json.access_token }}"

    - name: GET CISCO PSIRT OPEN VULN
      uri:
        url: https://api.cisco.com/security/advisories/{{ item.name }}?version={{ item.version }}
        headers:
          Accept: application/json
          Authorization: "{{ token_type }} {{ access_token }}"
        method: GET
        validate_certs: no
        status_code: [200, 406] # API reports 406 NO_DATA if no matching adv is found #
      loop: "{{ os_list }}"
      environment:
        https_proxy: http://<proxy-url>:<port>
      register: open_vuln

     # Process API response #

    - name: TEMPLATE OUT MARKDOWN REPORT
      template:
        src: openvuln.j2
        dest: openvuln.md

